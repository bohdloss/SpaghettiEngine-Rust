use crate::input;
use crate::input::GamePadButton::*;
use crate::input::Key::*;
use crate::input::MouseButton::*;
use glfw::{GamepadButton, JoystickId, Key, MouseButton};

pub(super) fn from_key(key: glfw::Key) -> input::Key {
    match key {
        Key::Space => Space,
        Key::Apostrophe => Apostrophe,
        Key::Comma => Comma,
        Key::Minus => Minus,
        Key::Period => Period,
        Key::Slash => Slash,
        Key::Num0 => Num0,
        Key::Num1 => Num1,
        Key::Num2 => Num2,
        Key::Num3 => Num3,
        Key::Num4 => Num4,
        Key::Num5 => Num5,
        Key::Num6 => Num6,
        Key::Num7 => Num7,
        Key::Num8 => Num8,
        Key::Num9 => Num9,
        Key::Semicolon => Semicolon,
        Key::Equal => Equal,
        Key::A => A,
        Key::B => B,
        Key::C => C,
        Key::D => D,
        Key::E => E,
        Key::F => F,
        Key::G => G,
        Key::H => H,
        Key::I => I,
        Key::J => J,
        Key::K => K,
        Key::L => L,
        Key::M => M,
        Key::N => N,
        Key::O => O,
        Key::P => P,
        Key::Q => Q,
        Key::R => R,
        Key::S => S,
        Key::T => T,
        Key::U => U,
        Key::V => V,
        Key::W => W,
        Key::X => X,
        Key::Y => Y,
        Key::Z => X,
        Key::LeftBracket => LeftBracket,
        Key::Backslash => BackSlash,
        Key::RightBracket => RightBracket,
        Key::GraveAccent => GraveAccent,
        Key::World1 => World1,
        Key::World2 => World2,
        Key::Escape => Escape,
        Key::Enter => Enter,
        Key::Tab => Tab,
        Key::Backspace => Backspace,
        Key::Insert => Insert,
        Key::Delete => Delete,
        Key::Right => Right,
        Key::Left => Left,
        Key::Down => Down,
        Key::Up => Up,
        Key::PageUp => PageUp,
        Key::PageDown => PageDown,
        Key::Home => Home,
        Key::End => End,
        Key::CapsLock => input::Key::CapsLock,
        Key::ScrollLock => ScrollLock,
        Key::NumLock => input::Key::NumLock,
        Key::PrintScreen => PrintScreen,
        Key::Pause => Pause,
        Key::F1 => F1,
        Key::F2 => F2,
        Key::F3 => F3,
        Key::F4 => F4,
        Key::F5 => F5,
        Key::F6 => F6,
        Key::F7 => F7,
        Key::F8 => F8,
        Key::F9 => F9,
        Key::F10 => F10,
        Key::F11 => F11,
        Key::F12 => F12,
        Key::F13 => F13,
        Key::F14 => F14,
        Key::F15 => F15,
        Key::F16 => F16,
        Key::F17 => F17,
        Key::F18 => F18,
        Key::F19 => F19,
        Key::F20 => F20,
        Key::F21 => F21,
        Key::F22 => F22,
        Key::F23 => F23,
        Key::F24 => F24,
        Key::F25 => F25,
        Key::Kp0 => KP0,
        Key::Kp1 => KP1,
        Key::Kp2 => KP2,
        Key::Kp3 => KP3,
        Key::Kp4 => KP4,
        Key::Kp5 => KP5,
        Key::Kp6 => KP6,
        Key::Kp7 => KP7,
        Key::Kp8 => KP8,
        Key::Kp9 => KP9,
        Key::KpDecimal => KPDecimal,
        Key::KpDivide => KPDivide,
        Key::KpMultiply => KPMultiply,
        Key::KpSubtract => KPSubtract,
        Key::KpAdd => KPAdd,
        Key::KpEnter => KPEnter,
        Key::KpEqual => KPEqual,
        Key::LeftShift => LeftShift,
        Key::LeftControl => LeftControl,
        Key::LeftAlt => LeftAlt,
        Key::LeftSuper => LeftSuper,
        Key::RightShift => RightShift,
        Key::RightControl => RightControl,
        Key::RightAlt => RightAlt,
        Key::RightSuper => RightSuper,
        Key::Menu => Menu,
        Key::Unknown => input::Key::Unknown,
    }
}

pub(super) fn from_mouse_button(button: glfw::MouseButton) -> input::MouseButton {
    match button {
        MouseButton::Button1 => LeftButton,
        MouseButton::Button2 => RightButton,
        MouseButton::Button3 => MiddleButton,
        MouseButton::Button4 => Button4,
        MouseButton::Button5 => Button5,
        MouseButton::Button6 => Button6,
        MouseButton::Button7 => Button7,
        MouseButton::Button8 => Button8,
    }
}

pub(super) fn from_game_pad_button(game_pad_button: glfw::GamepadButton) -> input::GamePadButton {
    match game_pad_button {
        GamepadButton::ButtonA => Cross,
        GamepadButton::ButtonB => Circle,
        GamepadButton::ButtonX => Square,
        GamepadButton::ButtonY => Triangle,
        GamepadButton::ButtonLeftBumper => LeftBumper,
        GamepadButton::ButtonRightBumper => RightBumper,
        GamepadButton::ButtonBack => Back,
        GamepadButton::ButtonStart => Start,
        GamepadButton::ButtonGuide => Guide,
        GamepadButton::ButtonLeftThumb => LeftThumb,
        GamepadButton::ButtonRightThumb => RightThumb,
        GamepadButton::ButtonDpadUp => DPadUp,
        GamepadButton::ButtonDpadRight => DPadRight,
        GamepadButton::ButtonDpadDown => DPadDown,
        GamepadButton::ButtonDpadLeft => DPadLeft,
    }
}

pub(super) fn index_to_joystick(index: usize) -> JoystickId {
    match index {
        0 => JoystickId::Joystick1,
        1 => JoystickId::Joystick2,
        2 => JoystickId::Joystick3,
        3 => JoystickId::Joystick4,
        4 => JoystickId::Joystick5,
        5 => JoystickId::Joystick6,
        6 => JoystickId::Joystick7,
        7 => JoystickId::Joystick8,
        8 => JoystickId::Joystick9,
        9 => JoystickId::Joystick10,
        10 => JoystickId::Joystick11,
        11 => JoystickId::Joystick12,
        12 => JoystickId::Joystick13,
        13 => JoystickId::Joystick14,
        14 => JoystickId::Joystick15,
        15 => JoystickId::Joystick16,
        _ => JoystickId::Joystick1,
    }
}
